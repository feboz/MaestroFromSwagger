/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ProjectsApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a given project. This is allowed only if current user is Admin.</remarks>
        /// <param name="projectId">The id of the project.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The project does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/project/{projectId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult DeleteProject([FromRoute][Required]int? projectId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"extension\" : \"extension\",\n      \"sceneId\" : 0,\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"landmark\" : {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"sceneId\" : 5,\n        \"contentId\" : 5,\n        \"description\" : \"description\",\n        \"type\" : { },\n        \"content\" : \"content\",\n        \"fileId\" : 6\n      },\n      \"projectId\" : 2\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectResponse>(exampleJson)
            : default(ProjectResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a given scen. This is allowed only if the current user is Admin.</remarks>
        /// <param name="projectId">The id of the project for which to delete the scene.</param>
        /// <param name="sceneId">The id of the scene to delete.</param>
        /// <response code="204">No content</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The project or the scene does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/projectScenes/{projectId}/scenes/{sceneId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteScene")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult DeleteScene([FromRoute][Required]int? projectId, [FromRoute][Required]int? sceneId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns a given project, if it is assigned to a team for which the current user is member.</remarks>
        /// <param name="projectId">The id of the project.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The project is not assigned to any team for which the current user is member.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/project/{projectId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult GetProject([FromRoute][Required]int? projectId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"extension\" : \"extension\",\n      \"sceneId\" : 0,\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"landmark\" : {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"sceneId\" : 5,\n        \"contentId\" : 5,\n        \"description\" : \"description\",\n        \"type\" : { },\n        \"content\" : \"content\",\n        \"fileId\" : 6\n      },\n      \"projectId\" : 2\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectResponse>(exampleJson)
            : default(ProjectResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns all the scene for a given project.</remarks>
        /// <param name="projectId">The id of the project for which scenes are requested.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/projectScenes/{projectId}/scenes")]
        [ValidateModelState]
        [SwaggerOperation("GetProjectScenes")]
        [SwaggerResponse(statusCode: 200, type: typeof(SceneResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult GetProjectScenes([FromRoute][Required]int? projectId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SceneResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"scenes\" : [ {\n      \"learningPaths\" : \"\",\n      \"sceneMetadata\" : {\n        \"extension\" : \"extension\",\n        \"sceneId\" : 0,\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"landmark\" : {\n          \"size\" : 1,\n          \"name\" : \"name\",\n          \"sceneId\" : 5,\n          \"contentId\" : 5,\n          \"description\" : \"description\",\n          \"type\" : { },\n          \"content\" : \"content\",\n          \"fileId\" : 6\n        },\n        \"projectId\" : 2\n      },\n      \"contents\" : \"\",\n      \"scenarios\" : \"\",\n      \"targets\" : \"\"\n    }, {\n      \"learningPaths\" : \"\",\n      \"sceneMetadata\" : {\n        \"extension\" : \"extension\",\n        \"sceneId\" : 0,\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"landmark\" : {\n          \"size\" : 1,\n          \"name\" : \"name\",\n          \"sceneId\" : 5,\n          \"contentId\" : 5,\n          \"description\" : \"description\",\n          \"type\" : { },\n          \"content\" : \"content\",\n          \"fileId\" : 6\n        },\n        \"projectId\" : 2\n      },\n      \"contents\" : \"\",\n      \"scenarios\" : \"\",\n      \"targets\" : \"\"\n    } ],\n    \"projectName\" : \"projectName\",\n    \"projectID\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SceneResponse>(exampleJson)
            : default(SceneResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a project to a given team. This is allowed only if the current user is Admin.</remarks>
        /// <param name="projectId">The id of the project.</param>
        /// <param name="newProject">The data of the project to be added. It contains the team id also.</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/project/{projectId}")]
        [ValidateModelState]
        [SwaggerOperation("PostProject")]
        [SwaggerResponse(statusCode: 201, type: typeof(ProjectResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PostProject([FromRoute][Required]int? projectId, [FromBody]Project newProject)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ProjectResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"extension\" : \"extension\",\n      \"sceneId\" : 0,\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"landmark\" : {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"sceneId\" : 5,\n        \"contentId\" : 5,\n        \"description\" : \"description\",\n        \"type\" : { },\n        \"content\" : \"content\",\n        \"fileId\" : 6\n      },\n      \"projectId\" : 2\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectResponse>(exampleJson)
            : default(ProjectResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a new project assigned to a team. This is allowed only if the current user is Admin.</remarks>
        /// <param name="projectId">The id of the project for which the new scene must be added.</param>
        /// <param name="newScene">The new scene.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The project does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/projectScenes/{projectId}/scenes")]
        [ValidateModelState]
        [SwaggerOperation("PostProjectScene")]
        [SwaggerResponse(statusCode: 200, type: typeof(SceneResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PostProjectScene([FromRoute][Required]int? projectId, [FromBody]Scene newScene)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SceneResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"scenes\" : [ {\n      \"learningPaths\" : \"\",\n      \"sceneMetadata\" : {\n        \"extension\" : \"extension\",\n        \"sceneId\" : 0,\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"landmark\" : {\n          \"size\" : 1,\n          \"name\" : \"name\",\n          \"sceneId\" : 5,\n          \"contentId\" : 5,\n          \"description\" : \"description\",\n          \"type\" : { },\n          \"content\" : \"content\",\n          \"fileId\" : 6\n        },\n        \"projectId\" : 2\n      },\n      \"contents\" : \"\",\n      \"scenarios\" : \"\",\n      \"targets\" : \"\"\n    }, {\n      \"learningPaths\" : \"\",\n      \"sceneMetadata\" : {\n        \"extension\" : \"extension\",\n        \"sceneId\" : 0,\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"landmark\" : {\n          \"size\" : 1,\n          \"name\" : \"name\",\n          \"sceneId\" : 5,\n          \"contentId\" : 5,\n          \"description\" : \"description\",\n          \"type\" : { },\n          \"content\" : \"content\",\n          \"fileId\" : 6\n        },\n        \"projectId\" : 2\n      },\n      \"contents\" : \"\",\n      \"scenarios\" : \"\",\n      \"targets\" : \"\"\n    } ],\n    \"projectName\" : \"projectName\",\n    \"projectID\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SceneResponse>(exampleJson)
            : default(SceneResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a given project. This is allowed only if the current user is Admin.</remarks>
        /// <param name="projectId">The id of the project to be updated.</param>
        /// <param name="updatedProject">The updated project.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The project does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/project/{projectId}")]
        [ValidateModelState]
        [SwaggerOperation("PutProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PutProject([FromRoute][Required]int? projectId, [FromBody]Project updatedProject)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"extension\" : \"extension\",\n      \"sceneId\" : 0,\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"landmark\" : {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"sceneId\" : 5,\n        \"contentId\" : 5,\n        \"description\" : \"description\",\n        \"type\" : { },\n        \"content\" : \"content\",\n        \"fileId\" : 6\n      },\n      \"projectId\" : 2\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectResponse>(exampleJson)
            : default(ProjectResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a given scene of a given project. This is allowed only if current user is Admin.</remarks>
        /// <param name="projectId">The id of the project for which the scene must be updated.</param>
        /// <param name="updatedScene">The scene updated.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The project does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/projectScenes/{projectId}/scenes")]
        [ValidateModelState]
        [SwaggerOperation("PutProjectScene")]
        [SwaggerResponse(statusCode: 200, type: typeof(SceneResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PutProjectScene([FromRoute][Required]int? projectId, [FromBody]Scene updatedScene)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SceneResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"scenes\" : [ {\n      \"learningPaths\" : \"\",\n      \"sceneMetadata\" : {\n        \"extension\" : \"extension\",\n        \"sceneId\" : 0,\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"landmark\" : {\n          \"size\" : 1,\n          \"name\" : \"name\",\n          \"sceneId\" : 5,\n          \"contentId\" : 5,\n          \"description\" : \"description\",\n          \"type\" : { },\n          \"content\" : \"content\",\n          \"fileId\" : 6\n        },\n        \"projectId\" : 2\n      },\n      \"contents\" : \"\",\n      \"scenarios\" : \"\",\n      \"targets\" : \"\"\n    }, {\n      \"learningPaths\" : \"\",\n      \"sceneMetadata\" : {\n        \"extension\" : \"extension\",\n        \"sceneId\" : 0,\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"landmark\" : {\n          \"size\" : 1,\n          \"name\" : \"name\",\n          \"sceneId\" : 5,\n          \"contentId\" : 5,\n          \"description\" : \"description\",\n          \"type\" : { },\n          \"content\" : \"content\",\n          \"fileId\" : 6\n        },\n        \"projectId\" : 2\n      },\n      \"contents\" : \"\",\n      \"scenarios\" : \"\",\n      \"targets\" : \"\"\n    } ],\n    \"projectName\" : \"projectName\",\n    \"projectID\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SceneResponse>(exampleJson)
            : default(SceneResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
