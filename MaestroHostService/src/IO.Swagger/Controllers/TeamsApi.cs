/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class TeamsApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a given team. This is allowed only if current user is Admin.</remarks>
        /// <param name="teamId">The team Id.</param>
        /// <response code="204">No content</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTeam")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult DeleteTeam([FromRoute][Required]int? teamId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a given user from a given team, but not its account. This is allowed only if current user is Admin.</remarks>
        /// <param name="teamId">The id of the team from which the user must be deleted.</param>
        /// <param name="userId">The id f the user to be deleted from the team.</param>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">The user is not a memeber of the team.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}/users/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteTeamUser")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult DeleteTeamUser([FromRoute][Required]int? teamId, [FromRoute][Required]int? userId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns the team by its supplied Id. Data contains also list of members.</remarks>
        /// <param name="teamId">The Id of the team.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}")]
        [ValidateModelState]
        [SwaggerOperation("GetTeam")]
        [SwaggerResponse(statusCode: 200, type: typeof(TeamResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult GetTeam([FromRoute][Required]int? teamId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TeamResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"memebers\" : \"\",\n      \"team\" : {\n        \"teamId\" : 0,\n        \"name\" : \"name\",\n        \"adminId\" : 6,\n        \"description\" : \"description\"\n      }\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TeamResponse>(exampleJson)
            : default(TeamResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a new Team. This is allowed only if current user is Admin.</remarks>
        /// <param name="teamId">The Id of the team.</param>
        /// <param name="newTeam">The new team.</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}")]
        [ValidateModelState]
        [SwaggerOperation("PostTeam")]
        [SwaggerResponse(statusCode: 201, type: typeof(TeamData), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PostTeam([FromRoute][Required]int? teamId, [FromBody]TeamData newTeam)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(TeamData));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"memebers\" : \"\",\n  \"team\" : {\n    \"teamId\" : 0,\n    \"name\" : \"name\",\n    \"adminId\" : 6,\n    \"description\" : \"description\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TeamData>(exampleJson)
            : default(TeamData);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a user to a team. This is alowed only if current user is Admin.</remarks>
        /// <param name="teamId">The id of the team to which add the user.</param>
        /// <param name="newUser">The new user to be added.</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}/users")]
        [ValidateModelState]
        [SwaggerOperation("PostTeamUser")]
        [SwaggerResponse(statusCode: 201, type: typeof(UserAccountResponse), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PostTeamUser([FromRoute][Required]int? teamId, [FromBody]UserAccount newUser)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(UserAccountResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"assignedProjects\" : \"\",\n    \"userAccount\" : {\n      \"person\" : {\n        \"firstName\" : \"firstName\",\n        \"lastName\" : \"lastName\",\n        \"zipCode\" : \"zipCode\",\n        \"country\" : \"country\",\n        \"address\" : \"address\",\n        \"officePhone\" : \"officePhone\",\n        \"city\" : \"city\",\n        \"description\" : \"description\",\n        \"personId\" : 6,\n        \"company\" : \"company\",\n        \"cellPhone\" : \"cellPhone\",\n        \"eMail\" : \"eMail\"\n      },\n      \"user\" : {\n        \"lockedOut\" : \"\",\n        \"userType\" : { },\n        \"isDisabled\" : \"isDisabled\",\n        \"login\" : \"login\",\n        \"userId\" : 0,\n        \"passwordHash\" : \"passwordHash\",\n        \"lastPasswordChanged\" : \"2000-01-23T04:56:07.000+00:00\"\n      }\n    },\n    \"assignedTeams\" : \"\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserAccountResponse>(exampleJson)
            : default(UserAccountResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a given team. This is allowed only if the current user is Admin.</remarks>
        /// <param name="teamId">The id of the team to be updated.</param>
        /// <param name="teamData"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}")]
        [ValidateModelState]
        [SwaggerOperation("PutTeam")]
        [SwaggerResponse(statusCode: 201, type: typeof(TeamData), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PutTeam([FromRoute][Required]int? teamId, [FromBody]TeamData teamData)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(TeamData));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"memebers\" : \"\",\n  \"team\" : {\n    \"teamId\" : 0,\n    \"name\" : \"name\",\n    \"adminId\" : 6,\n    \"description\" : \"description\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TeamData>(exampleJson)
            : default(TeamData);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a given user. This is allowed only if current logged user is Admin for the team.</remarks>
        /// <param name="teamId">The id of the team to which add the user.</param>
        /// <param name="userId">The id of the user to be updated.</param>
        /// <param name="updatedTeamUser">The update user.</param>
        /// <response code="200">Succes</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/team/{teamId}/users/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("PutTeamUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserAccountResponse), description: "Succes")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PutTeamUser([FromRoute][Required]int? teamId, [FromRoute][Required]int? userId, [FromBody]UserAccount updatedTeamUser)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserAccountResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"assignedProjects\" : \"\",\n    \"userAccount\" : {\n      \"person\" : {\n        \"firstName\" : \"firstName\",\n        \"lastName\" : \"lastName\",\n        \"zipCode\" : \"zipCode\",\n        \"country\" : \"country\",\n        \"address\" : \"address\",\n        \"officePhone\" : \"officePhone\",\n        \"city\" : \"city\",\n        \"description\" : \"description\",\n        \"personId\" : 6,\n        \"company\" : \"company\",\n        \"cellPhone\" : \"cellPhone\",\n        \"eMail\" : \"eMail\"\n      },\n      \"user\" : {\n        \"lockedOut\" : \"\",\n        \"userType\" : { },\n        \"isDisabled\" : \"isDisabled\",\n        \"login\" : \"login\",\n        \"userId\" : 0,\n        \"passwordHash\" : \"passwordHash\",\n        \"lastPasswordChanged\" : \"2000-01-23T04:56:07.000+00:00\"\n      }\n    },\n    \"assignedTeams\" : \"\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserAccountResponse>(exampleJson)
            : default(UserAccountResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
