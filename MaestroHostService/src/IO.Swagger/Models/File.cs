/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The file data.
    /// </summary>
    [DataContract]
    public partial class File : IEquatable<File>
    { 
        /// <summary>
        /// The id of the file.
        /// </summary>
        /// <value>The id of the file.</value>
        [DataMember(Name="fileId")]
        public int? FileId { get; set; }

        /// <summary>
        /// The name of the file.
        /// </summary>
        /// <value>The name of the file.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        public enum ContentType
        { 
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = text)]
            TextEnum = 1,
            
            /// <summary>
            /// Enum ImageEnum for image
            /// </summary>
            [EnumMember(Value = image)]
            ImageEnum = 2,
            
            /// <summary>
            /// Enum VideoEnum for video
            /// </summary>
            [EnumMember(Value = video)]
            VideoEnum = 3,
            
            /// <summary>
            /// Enum ModelEnum for model
            /// </summary>
            [EnumMember(Value = model)]
            ModelEnum = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public ContentType? Type { get; set; }

        /// <summary>
        /// The file size.
        /// </summary>
        /// <value>The file size.</value>
        [DataMember(Name="size")]
        public int? Size { get; set; }

        /// <summary>
        /// The belonging scene.
        /// </summary>
        /// <value>The belonging scene.</value>
        [DataMember(Name="sceneId")]
        public int? SceneId { get; set; }

        /// <summary>
        /// The belonging content. If this is null, the file is the landmark and has only a belonging scene.
        /// </summary>
        /// <value>The belonging content. If this is null, the file is the landmark and has only a belonging scene.</value>
        [DataMember(Name="contentId")]
        public int? ContentId { get; set; }

        /// <summary>
        /// The file content.
        /// </summary>
        /// <value>The file content.</value>
        [DataMember(Name="content")]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class File {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SceneId: ").Append(SceneId).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((File)obj);
        }

        /// <summary>
        /// Returns true if File instances are equal
        /// </summary>
        /// <param name="other">Instance of File to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(File other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileId == other.FileId ||
                    FileId != null &&
                    FileId.Equals(other.FileId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    SceneId == other.SceneId ||
                    SceneId != null &&
                    SceneId.Equals(other.SceneId)
                ) && 
                (
                    ContentId == other.ContentId ||
                    ContentId != null &&
                    ContentId.Equals(other.ContentId)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileId != null)
                    hashCode = hashCode * 59 + FileId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (SceneId != null)
                    hashCode = hashCode * 59 + SceneId.GetHashCode();
                    if (ContentId != null)
                    hashCode = hashCode * 59 + ContentId.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(File left, File right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(File left, File right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
