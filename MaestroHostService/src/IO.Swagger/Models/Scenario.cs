/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The set of informative views in which the scene is subdivided.
    /// </summary>
    [DataContract]
    public partial class Scenario : IEquatable<Scenario>
    { 
        /// <summary>
        /// Gets or Sets ScenarioId
        /// </summary>
        [DataMember(Name="scenarioId")]
        public int? ScenarioId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ParentScenes
        /// </summary>
        [DataMember(Name="parentScenes")]
        public List<Scene> ParentScenes { get; set; }

        /// <summary>
        /// Gets or Sets LearningPathIDs
        /// </summary>
        [DataMember(Name="learningPathIDs")]
        public List<LearningPath> LearningPathIDs { get; set; }

        /// <summary>
        /// Gets or Sets StructureType
        /// </summary>
        [DataMember(Name="structureType")]
        public string StructureType { get; set; }

        /// <summary>
        /// Gets or Sets SceneId
        /// </summary>
        [DataMember(Name="sceneId")]
        public int? SceneId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Scenario {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParentScenes: ").Append(ParentScenes).Append("\n");
            sb.Append("  LearningPathIDs: ").Append(LearningPathIDs).Append("\n");
            sb.Append("  StructureType: ").Append(StructureType).Append("\n");
            sb.Append("  SceneId: ").Append(SceneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Scenario)obj);
        }

        /// <summary>
        /// Returns true if Scenario instances are equal
        /// </summary>
        /// <param name="other">Instance of Scenario to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scenario other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ScenarioId == other.ScenarioId ||
                    ScenarioId != null &&
                    ScenarioId.Equals(other.ScenarioId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ParentScenes == other.ParentScenes ||
                    ParentScenes != null &&
                    ParentScenes.SequenceEqual(other.ParentScenes)
                ) && 
                (
                    LearningPathIDs == other.LearningPathIDs ||
                    LearningPathIDs != null &&
                    LearningPathIDs.SequenceEqual(other.LearningPathIDs)
                ) && 
                (
                    StructureType == other.StructureType ||
                    StructureType != null &&
                    StructureType.Equals(other.StructureType)
                ) && 
                (
                    SceneId == other.SceneId ||
                    SceneId != null &&
                    SceneId.Equals(other.SceneId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ScenarioId != null)
                    hashCode = hashCode * 59 + ScenarioId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ParentScenes != null)
                    hashCode = hashCode * 59 + ParentScenes.GetHashCode();
                    if (LearningPathIDs != null)
                    hashCode = hashCode * 59 + LearningPathIDs.GetHashCode();
                    if (StructureType != null)
                    hashCode = hashCode * 59 + StructureType.GetHashCode();
                    if (SceneId != null)
                    hashCode = hashCode * 59 + SceneId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Scenario left, Scenario right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Scenario left, Scenario right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
