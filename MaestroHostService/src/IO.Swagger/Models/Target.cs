/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A point in the Landmark defining a step needed for a given task. Build up a LearningPath.
    /// </summary>
    [DataContract]
    public partial class Target : IEquatable<Target>
    { 
        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name="targetId")]
        public int? TargetId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position")]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets LearningPathIds
        /// </summary>
        [DataMember(Name="learningPathIds")]
        public List<int?> LearningPathIds { get; set; }

        /// <summary>
        /// Gets or Sets ContentIds
        /// </summary>
        [DataMember(Name="contentIds")]
        public List<int?> ContentIds { get; set; }

        /// <summary>
        /// Gets or Sets SceneId
        /// </summary>
        [DataMember(Name="sceneId")]
        public int? SceneId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Target {\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  LearningPathIds: ").Append(LearningPathIds).Append("\n");
            sb.Append("  ContentIds: ").Append(ContentIds).Append("\n");
            sb.Append("  SceneId: ").Append(SceneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Target)obj);
        }

        /// <summary>
        /// Returns true if Target instances are equal
        /// </summary>
        /// <param name="other">Instance of Target to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Target other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TargetId == other.TargetId ||
                    TargetId != null &&
                    TargetId.Equals(other.TargetId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    LearningPathIds == other.LearningPathIds ||
                    LearningPathIds != null &&
                    LearningPathIds.SequenceEqual(other.LearningPathIds)
                ) && 
                (
                    ContentIds == other.ContentIds ||
                    ContentIds != null &&
                    ContentIds.SequenceEqual(other.ContentIds)
                ) && 
                (
                    SceneId == other.SceneId ||
                    SceneId != null &&
                    SceneId.Equals(other.SceneId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TargetId != null)
                    hashCode = hashCode * 59 + TargetId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (LearningPathIds != null)
                    hashCode = hashCode * 59 + LearningPathIds.GetHashCode();
                    if (ContentIds != null)
                    hashCode = hashCode * 59 + ContentIds.GetHashCode();
                    if (SceneId != null)
                    hashCode = hashCode * 59 + SceneId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Target left, Target right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Target left, Target right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
