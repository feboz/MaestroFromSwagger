/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Data about the user.
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// The user Id.
        /// </summary>
        /// <value>The user Id.</value>
        [DataMember(Name="userId")]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        public enum UserType
        { 
            /// <summary>
            /// Enum AdminEnum for admin
            /// </summary>
            [EnumMember(Value = admin)]
            AdminEnum = 1,
            
            /// <summary>
            /// Enum MemberEnum for member
            /// </summary>
            [EnumMember(Value = member)]
            MemberEnum = 2
        }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType")]
        public UserType? UserType { get; set; }

        /// <summary>
        /// The user login.
        /// </summary>
        /// <value>The user login.</value>
        [DataMember(Name="login")]
        public string Login { get; set; }

        /// <summary>
        /// The hashed password.
        /// </summary>
        /// <value>The hashed password.</value>
        [DataMember(Name="passwordHash")]
        public string PasswordHash { get; set; }

        /// <summary>
        /// The last date when the password is changed.
        /// </summary>
        /// <value>The last date when the password is changed.</value>
        [DataMember(Name="lastPasswordChanged")]
        public DateTime? LastPasswordChanged { get; set; }

        /// <summary>
        /// Check for account abilitation.
        /// </summary>
        /// <value>Check for account abilitation.</value>
        [DataMember(Name="isDisabled")]
        public string IsDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  LastPasswordChanged: ").Append(LastPasswordChanged).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserType == other.UserType ||
                    UserType != null &&
                    UserType.Equals(other.UserType)
                ) && 
                (
                    Login == other.Login ||
                    Login != null &&
                    Login.Equals(other.Login)
                ) && 
                (
                    PasswordHash == other.PasswordHash ||
                    PasswordHash != null &&
                    PasswordHash.Equals(other.PasswordHash)
                ) && 
                (
                    LastPasswordChanged == other.LastPasswordChanged ||
                    LastPasswordChanged != null &&
                    LastPasswordChanged.Equals(other.LastPasswordChanged)
                ) && 
                (
                    IsDisabled == other.IsDisabled ||
                    IsDisabled != null &&
                    IsDisabled.Equals(other.IsDisabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserType != null)
                    hashCode = hashCode * 59 + UserType.GetHashCode();
                    if (Login != null)
                    hashCode = hashCode * 59 + Login.GetHashCode();
                    if (PasswordHash != null)
                    hashCode = hashCode * 59 + PasswordHash.GetHashCode();
                    if (LastPasswordChanged != null)
                    hashCode = hashCode * 59 + LastPasswordChanged.GetHashCode();
                    if (IsDisabled != null)
                    hashCode = hashCode * 59 + IsDisabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
