/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A given user with account data, authorizarion data, assigned teams and assigned projects.
    /// </summary>
    [DataContract]
    public partial class UserAccountData : IEquatable<UserAccountData>
    { 
        /// <summary>
        /// Gets or Sets UserAccount
        /// </summary>
        [DataMember(Name="userAccount")]
        public UserAccount UserAccount { get; set; }

        /// <summary>
        /// Gets or Sets AssignedTeams
        /// </summary>
        [DataMember(Name="assignedTeams")]
        public UserTeams AssignedTeams { get; set; }

        /// <summary>
        /// Gets or Sets AssignedProjects
        /// </summary>
        [DataMember(Name="assignedProjects")]
        public Projects AssignedProjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAccountData {\n");
            sb.Append("  UserAccount: ").Append(UserAccount).Append("\n");
            sb.Append("  AssignedTeams: ").Append(AssignedTeams).Append("\n");
            sb.Append("  AssignedProjects: ").Append(AssignedProjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserAccountData)obj);
        }

        /// <summary>
        /// Returns true if UserAccountData instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAccountData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAccountData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserAccount == other.UserAccount ||
                    UserAccount != null &&
                    UserAccount.Equals(other.UserAccount)
                ) && 
                (
                    AssignedTeams == other.AssignedTeams ||
                    AssignedTeams != null &&
                    AssignedTeams.Equals(other.AssignedTeams)
                ) && 
                (
                    AssignedProjects == other.AssignedProjects ||
                    AssignedProjects != null &&
                    AssignedProjects.Equals(other.AssignedProjects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserAccount != null)
                    hashCode = hashCode * 59 + UserAccount.GetHashCode();
                    if (AssignedTeams != null)
                    hashCode = hashCode * 59 + AssignedTeams.GetHashCode();
                    if (AssignedProjects != null)
                    hashCode = hashCode * 59 + AssignedProjects.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserAccountData left, UserAccountData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserAccountData left, UserAccountData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
