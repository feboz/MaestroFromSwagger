/*
 * MaestroHostService
 *
 * This is the Host API for Maestro System
 *
 * OpenAPI spec version: 1.0.0
 * Contact: febo74@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class FilesApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return a given file stream.</remarks>
        /// <param name="fileId">The id of the file to download.</param>
        /// <param name="offset">The optional starting point of a file segment. If this is absent or 0 the starting point is the beginning of the file.</param>
        /// <param name="length">The optional length of the file. If this is absent or 0 the entire file length is considered.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The file does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/Files/{fileId}")]
        [ValidateModelState]
        [SwaggerOperation("GetFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult GetFile([FromRoute][Required]int? fileId, [FromQuery]int? offset, [FromQuery]int? length)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"sceneId\" : 5,\n      \"contentId\" : 5,\n      \"description\" : \"description\",\n      \"type\" : { },\n      \"content\" : \"content\",\n      \"fileId\" : 6\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FileResponse>(exampleJson)
            : default(FileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Upload a given file stream.</remarks>
        /// <param name="fileId">The id of the file to download.</param>
        /// <param name="owner">The owner of the file.</param>
        /// <param name="ownerId">The id of the owner.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The file does not exists.</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/TheEdgeCompany/MaestroHostService/1.0.0/Files/{fileId}")]
        [ValidateModelState]
        [SwaggerOperation("PostFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(FileResponse), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult PostFile([FromRoute][Required]int? fileId, [FromRoute][Required]string owner, [FromRoute][Required]int? ownerId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FileResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"sceneId\" : 5,\n      \"contentId\" : 5,\n      \"description\" : \"description\",\n      \"type\" : { },\n      \"content\" : \"content\",\n      \"fileId\" : 6\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FileResponse>(exampleJson)
            : default(FileResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
